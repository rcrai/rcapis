syntax = "proto3";

package rcrai.rpc.motoko;

import "rcapis/api/annotations.proto";
import "rcapis/rpc/motoko/entity_type.proto";

import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";


option cc_enable_arenas = true;
option go_package = "github.com/rcrai/rcapis/rcapis/rpc/motoko/session_entity_type;session_entity_type";

option java_multiple_files = true;
option java_outer_classname = "SessionEntityTypeProto";
option java_package = "com.rcrai.rcapis.rpc.motoko";


// Manages session entity types.
//
// Session entity types can be redefined on a session level, allowing for
// specific concepts, like a user's playlists.
//
//
// Standard methods.
service SessionEntityTypes {
    // Returns the list of all session entity types in the specified session.
    rpc ListSessionEntityTypes (ListSessionEntityTypesRequest) returns (ListSessionEntityTypesResponse) {
        option (rcrai.api.http) = { get: "/v1/{parent=projects/*/agent/sessions/*}/entityTypes" };
    }

    // Retrieves the specified session entity type.
    rpc GetSessionEntityType (GetSessionEntityTypeRequest) returns (SessionEntityType) {
        option (rcrai.api.http) = { get: "/v1/{name=projects/*/agent/sessions/*/entityTypes/*}" };
    }

    // Creates a session entity type.
    rpc CreateSessionEntityType (CreateSessionEntityTypeRequest) returns (SessionEntityType) {
        option (rcrai.api.http) = { post: "/v1/{parent=projects/*/agent/sessions/*}/entityTypes" body: "session_entity_type" };
    }

    // Updates the specified session entity type.
    rpc UpdateSessionEntityType (UpdateSessionEntityTypeRequest) returns (SessionEntityType) {
        option (rcrai.api.http) = { patch: "/v1/{session_entity_type.name=projects/*/agent/sessions/*/entityTypes/*}" body: "session_entity_type" };
    }

    // Deletes the specified session entity type.
    rpc DeleteSessionEntityType (DeleteSessionEntityTypeRequest) returns (google.protobuf.Empty) {
        option (rcrai.api.http) = { delete: "/v1/{name=projects/*/agent/sessions/*/entityTypes/*}" };
    }
}

// Represents a session entity type.
//
// Extends or replaces a developer entity type at the user session level (we
// refer to the entity types defined at the agent level as "developer entity
// types").
//
// Note: session entity types apply to all queries, regardless of the language.
message SessionEntityType {
    // The types of modifications for a session entity type.
    enum EntityOverrideMode {
        // Not specified. This value should be never used.
        ENTITY_OVERRIDE_MODE_UNSPECIFIED = 0;

        // The collection of session entities overrides the collection of entities
        // in the corresponding developer entity type.
        ENTITY_OVERRIDE_MODE_OVERRIDE = 1;

        // The collection of session entities extends the collection of entities in
        // the corresponding developer entity type.
        // Calls to `ListSessionEntityTypes`, `GetSessionEntityType`,
        // `CreateSessionEntityType` and `UpdateSessionEntityType` return the full
        // collection of entities from the developer entity type and the session
        // entity type.
        ENTITY_OVERRIDE_MODE_SUPPLEMENT = 2;
    }

    // Required. The unique identifier of this session entity type. Format:
    // `projects/<Project ID>/agent/sessions/<Session ID>/entityTypes/<Entity Type
    // Display Name>`.
    string name = 1;

    // Required. Indicates whether the additional data should override or
    // supplement the developer entity type definition.
    EntityOverrideMode entity_override_mode = 2;

    // Required. The collection of entities associated with this session entity
    // type.
    repeated EntityType.Entity entities = 3;
}

// The request message for [SessionEntityTypes.ListSessionEntityTypes].
message ListSessionEntityTypesRequest {
    // Required. The session to list all session entity types from.
    // Format: `projects/<Project ID>/agent/sessions/<Session ID>`.
    string parent = 1;

    // Optional. The maximum number of items to return in a single page. By
    // default 100 and at most 1000.
    int32 page_size = 2;

    // Optional. The next_page_token value returned from a previous list request.
    string page_token = 3;
}

// The response message for [SessionEntityTypes.ListSessionEntityTypes].
message ListSessionEntityTypesResponse {
    // The list of session entity types. There will be a maximum number of items
    // returned based on the page_size field in the request.
    repeated SessionEntityType session_entity_types = 1;

    // Token to retrieve the next page of results, or empty if there are no
    // more results in the list.
    string next_page_token = 2;
}

// The request message for [SessionEntityTypes.GetSessionEntityType].
message GetSessionEntityTypeRequest {
    // Required. The name of the session entity type. Format:
    // `projects/<Project ID>/agent/sessions/<Session ID>/entityTypes/<Entity Type
    // Display Name>`.
    string name = 1;
}

// The request message for [SessionEntityTypes.CreateSessionEntityType].
message CreateSessionEntityTypeRequest {
    // Required. The session to create a session entity type for.
    // Format: `projects/<Project ID>/agent/sessions/<Session ID>`.
    string parent = 1;

    // Required. The session entity type to create.
    SessionEntityType session_entity_type = 2;
}

// The request message for [SessionEntityTypes.UpdateSessionEntityType].
message UpdateSessionEntityTypeRequest {
    // Required. The entity type to update. Format:
    // `projects/<Project ID>/agent/sessions/<Session ID>/entityTypes/<Entity Type
    // Display Name>`.
    SessionEntityType session_entity_type = 1;

    // Optional. The mask to control which fields get updated.
    google.protobuf.FieldMask update_mask = 2;
}

// The request message for [SessionEntityTypes.DeleteSessionEntityType].
message DeleteSessionEntityTypeRequest {
    // Required. The name of the entity type to delete. Format:
    // `projects/<Project ID>/agent/sessions/<Session ID>/entityTypes/<Entity Type
    // Display Name>`.
    string name = 1;
}
