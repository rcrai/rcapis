syntax = "proto3";

package rcrai.rpc.motoko;

import "rcapis/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";


option cc_enable_arenas = true;
option go_package = "github.com/rcrai/rcapis/rcapis/rpc/motoko/context;context";

option java_multiple_files = true;
option java_outer_classname = "ContextProto";
option java_package = "com.rcrai.rcapis.rpc.motoko";

// Manages contexts.
//
//
// Refer to [documentation](https://dialogflow.com/docs/contexts) for more
// # details about contexts.
//
// Standard methods.
service Contexts {
    // Returns the list of all contexts in the specified session.
    rpc ListContexts (ListContextsRequest) returns (ListContextsResponse) {
        option (rcrai.api.http) = { get: "/v1/{parent=projects/*/agent/sessions/*}/contexts" };
    }

    // Retrieves the specified context.
    rpc GetContext (GetContextRequest) returns (Context) {
        option (rcrai.api.http) = { get: "/v1/{name=projects/*/agent/sessions/*/contexts/*}" };
    }

    // Creates a context.
    rpc CreateContext (CreateContextRequest) returns (Context) {
        option (rcrai.api.http) = { post: "/v1/{parent=projects/*/agent/sessions/*}/contexts" body: "context" };
    }

    // Updates the specified context.
    rpc UpdateContext (UpdateContextRequest) returns (Context) {
        option (rcrai.api.http) = { patch: "/v1/{context.name=projects/*/agent/sessions/*/contexts/*}" body: "context" };
    }

    // Deletes the specified context.
    rpc DeleteContext (DeleteContextRequest) returns (google.protobuf.Empty) {
        option (rcrai.api.http) = { delete: "/v1/{name=projects/*/agent/sessions/*/contexts/*}" };
    }

    // Deletes all active contexts in the specified session.
    rpc DeleteAllContexts (DeleteAllContextsRequest) returns (google.protobuf.Empty) {
        option (rcrai.api.http) = { delete: "/v1/{parent=projects/*/agent/sessions/*}/contexts" };
    }
}

// Represents a context.
message Context {
    // Required. The unique identifier of the context. Format:
    // `projects/<Project ID>/agent/sessions/<Session ID>/contexts/<Context ID>`.
    // Note: The Context ID is always converted to lowercase.
    string name = 1;

    // Optional. The number of conversational query requests after which the
    // context expires. If set to `0` (the default) the context expires
    // immediately. Contexts expire automatically after 10 minutes even if there
    // are no matching queries.
    int32 lifespan_count = 2;

    // Optional. The collection of parameters associated with this context.
    // Refer to [this doc](https://dialogflow.com/docs/actions-and-parameters) for
    // syntax.
    google.protobuf.Struct parameters = 3;
}

// The request message for [Contexts.ListContexts].
message ListContextsRequest {
    // Required. The session to list all contexts from.
    // Format: `projects/<Project ID>/agent/sessions/<Session ID>`.
    string parent = 1;

    // Optional. The maximum number of items to return in a single page. By
    // default 100 and at most 1000.
    int32 page_size = 2;

    // Optional. The next_page_token value returned from a previous list request.
    string page_token = 3;
}

// The response message for [Contexts.ListContexts].
message ListContextsResponse {
    // The list of contexts. There will be a maximum number of items
    // returned based on the page_size field in the request.
    repeated Context contexts = 1;

    // Token to retrieve the next page of results, or empty if there are no
    // more results in the list.
    string next_page_token = 2;
}

// The request message for [Contexts.GetContext].
message GetContextRequest {
    // Required. The name of the context. Format:
    // `projects/<Project ID>/agent/sessions/<Session ID>/contexts/<Context ID>`.
    string name = 1;
}

// The request message for [Contexts.CreateContext].
message CreateContextRequest {
    // Required. The session to create a context for.
    // Format: `projects/<Project ID>/agent/sessions/<Session ID>`.
    string parent = 1;

    // Required. The context to create.
    Context context = 2;
}

// The request message for [Contexts.UpdateContext].
message UpdateContextRequest {
    // Required. The context to update. Format:
    // `projects/<Project ID>/agent/sessions/<Session ID>/contexts/<Context ID>`.
    Context context = 1;

    // Optional. The mask to control which fields get updated.
    google.protobuf.FieldMask update_mask = 2;
}

// The request message for [Contexts.DeleteContext].
message DeleteContextRequest {
    // Required. The name of the context to delete. Format:
    // `projects/<Project ID>/agent/sessions/<Session ID>/contexts/<Context ID>`.
    string name = 1;
}

// The request message for [Contexts.DeleteAllContexts].
message DeleteAllContextsRequest {
    // Required. The name of the session to delete all contexts from. Format:
    // `projects/<Project ID>/agent/sessions/<Session ID>`.
    string parent = 1;
}
