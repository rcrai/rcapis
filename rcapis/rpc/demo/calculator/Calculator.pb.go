// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rcapis/rpc/demo/Calculator.proto

package calculator

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/rcrai/rcapis/rcapis/api/annotations"
	code "github.com/rcrai/rcapis/rcapis/rpc/code"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Op int32

const (
	Op_PLUS     Op = 0
	Op_MINUS    Op = 1
	Op_MULTIPLY Op = 3
	Op_DIVIDE   Op = 4
)

var Op_name = map[int32]string{
	0: "PLUS",
	1: "MINUS",
	3: "MULTIPLY",
	4: "DIVIDE",
}

var Op_value = map[string]int32{
	"PLUS":     0,
	"MINUS":    1,
	"MULTIPLY": 3,
	"DIVIDE":   4,
}

func (x Op) String() string {
	return proto.EnumName(Op_name, int32(x))
}

func (Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_490f263d37c691c2, []int{0}
}

type Question struct {
	Lv                   float32  `protobuf:"fixed32,1,opt,name=lv,proto3" json:"lv,omitempty"`
	Rv                   float32  `protobuf:"fixed32,2,opt,name=rv,proto3" json:"rv,omitempty"`
	Op                   Op       `protobuf:"varint,3,opt,name=op,proto3,enum=rcrai.rpc.demo.Op" json:"op,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Question) Reset()         { *m = Question{} }
func (m *Question) String() string { return proto.CompactTextString(m) }
func (*Question) ProtoMessage()    {}
func (*Question) Descriptor() ([]byte, []int) {
	return fileDescriptor_490f263d37c691c2, []int{0}
}

func (m *Question) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Question.Unmarshal(m, b)
}
func (m *Question) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Question.Marshal(b, m, deterministic)
}
func (m *Question) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Question.Merge(m, src)
}
func (m *Question) XXX_Size() int {
	return xxx_messageInfo_Question.Size(m)
}
func (m *Question) XXX_DiscardUnknown() {
	xxx_messageInfo_Question.DiscardUnknown(m)
}

var xxx_messageInfo_Question proto.InternalMessageInfo

func (m *Question) GetLv() float32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

func (m *Question) GetRv() float32 {
	if m != nil {
		return m.Rv
	}
	return 0
}

func (m *Question) GetOp() Op {
	if m != nil {
		return m.Op
	}
	return Op_PLUS
}

type Answer struct {
	Ret                  float32   `protobuf:"fixed32,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Code                 code.Code `protobuf:"varint,2,opt,name=code,proto3,enum=rcrai.rpc.Code" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Answer) Reset()         { *m = Answer{} }
func (m *Answer) String() string { return proto.CompactTextString(m) }
func (*Answer) ProtoMessage()    {}
func (*Answer) Descriptor() ([]byte, []int) {
	return fileDescriptor_490f263d37c691c2, []int{1}
}

func (m *Answer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Answer.Unmarshal(m, b)
}
func (m *Answer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Answer.Marshal(b, m, deterministic)
}
func (m *Answer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Answer.Merge(m, src)
}
func (m *Answer) XXX_Size() int {
	return xxx_messageInfo_Answer.Size(m)
}
func (m *Answer) XXX_DiscardUnknown() {
	xxx_messageInfo_Answer.DiscardUnknown(m)
}

var xxx_messageInfo_Answer proto.InternalMessageInfo

func (m *Answer) GetRet() float32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *Answer) GetCode() code.Code {
	if m != nil {
		return m.Code
	}
	return code.Code_OK
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_490f263d37c691c2, []int{2}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type EchoMessage struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoMessage) Reset()         { *m = EchoMessage{} }
func (m *EchoMessage) String() string { return proto.CompactTextString(m) }
func (*EchoMessage) ProtoMessage()    {}
func (*EchoMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_490f263d37c691c2, []int{3}
}

func (m *EchoMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoMessage.Unmarshal(m, b)
}
func (m *EchoMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoMessage.Marshal(b, m, deterministic)
}
func (m *EchoMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoMessage.Merge(m, src)
}
func (m *EchoMessage) XXX_Size() int {
	return xxx_messageInfo_EchoMessage.Size(m)
}
func (m *EchoMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EchoMessage proto.InternalMessageInfo

func (m *EchoMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EchoMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type EchoRequest struct {
	Message              *EchoMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *EchoRequest) Reset()         { *m = EchoRequest{} }
func (m *EchoRequest) String() string { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()    {}
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_490f263d37c691c2, []int{4}
}

func (m *EchoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoRequest.Unmarshal(m, b)
}
func (m *EchoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoRequest.Marshal(b, m, deterministic)
}
func (m *EchoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRequest.Merge(m, src)
}
func (m *EchoRequest) XXX_Size() int {
	return xxx_messageInfo_EchoRequest.Size(m)
}
func (m *EchoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRequest proto.InternalMessageInfo

func (m *EchoRequest) GetMessage() *EchoMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterEnum("rcrai.rpc.demo.Op", Op_name, Op_value)
	proto.RegisterType((*Question)(nil), "rcrai.rpc.demo.Question")
	proto.RegisterType((*Answer)(nil), "rcrai.rpc.demo.Answer")
	proto.RegisterType((*Empty)(nil), "rcrai.rpc.demo.Empty")
	proto.RegisterType((*EchoMessage)(nil), "rcrai.rpc.demo.EchoMessage")
	proto.RegisterType((*EchoRequest)(nil), "rcrai.rpc.demo.EchoRequest")
}

func init() { proto.RegisterFile("rcapis/rpc/demo/Calculator.proto", fileDescriptor_490f263d37c691c2) }

var fileDescriptor_490f263d37c691c2 = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x17, 0xb7, 0xeb, 0x9f, 0x33, 0xd4, 0x45, 0x86, 0xa1, 0xae, 0x80, 0xa8, 0x82, 0x90,
	0xa6, 0x5e, 0xc4, 0xa2, 0x15, 0x37, 0x43, 0xd5, 0xc4, 0xd6, 0x0a, 0x55, 0x6a, 0xb7, 0x92, 0xd1,
	0x49, 0xc0, 0x55, 0xe6, 0x98, 0xd6, 0x52, 0x52, 0x1b, 0x27, 0x0d, 0x42, 0xd3, 0x6e, 0x78, 0x05,
	0xde, 0x8b, 0x1b, 0x5e, 0x81, 0x87, 0xe0, 0x12, 0xd9, 0x69, 0xd6, 0x52, 0x50, 0xef, 0x72, 0xe2,
	0xf3, 0xfd, 0xce, 0x39, 0x9f, 0x8f, 0xa1, 0xa9, 0xa8, 0x2f, 0x79, 0x4c, 0x94, 0xa4, 0x24, 0x60,
	0x91, 0x20, 0x67, 0x7e, 0x48, 0x17, 0xa1, 0x9f, 0x08, 0xe5, 0x4a, 0x25, 0x12, 0x81, 0x6b, 0x8a,
	0x2a, 0x9f, 0xbb, 0x4a, 0x52, 0x57, 0x27, 0x34, 0x1e, 0x2f, 0x15, 0xbe, 0xe4, 0xc4, 0x9f, 0xcf,
	0x45, 0xe2, 0x27, 0x5c, 0xcc, 0xe3, 0x2c, 0xbb, 0x71, 0xb0, 0xc6, 0xa3, 0x22, 0x60, 0xd9, 0x6f,
	0xe7, 0x1c, 0x2a, 0x6f, 0x17, 0x2c, 0xd6, 0x99, 0xb8, 0x06, 0x28, 0x4c, 0xeb, 0x56, 0xd3, 0x3a,
	0x42, 0x1e, 0x0a, 0x53, 0x1d, 0xab, 0xb4, 0x8e, 0xb2, 0x58, 0xa5, 0xd8, 0x01, 0x24, 0x64, 0xbd,
	0xd0, 0xb4, 0x8e, 0x6a, 0x6d, 0xec, 0xfe, 0x5d, 0xdd, 0xbd, 0x90, 0x1e, 0x12, 0xd2, 0x39, 0x81,
	0xd2, 0xeb, 0x79, 0xfc, 0x85, 0x29, 0x6c, 0x43, 0x41, 0xb1, 0x64, 0x89, 0xd3, 0x9f, 0xf8, 0x19,
	0x14, 0x75, 0x65, 0x43, 0xac, 0xb5, 0xf7, 0xd7, 0x08, 0x67, 0x22, 0x60, 0x9e, 0x39, 0x74, 0xca,
	0xb0, 0xdb, 0x8f, 0x64, 0xf2, 0xd5, 0xe9, 0xc0, 0x5e, 0x9f, 0xce, 0xc4, 0x88, 0xc5, 0xb1, 0x3f,
	0x65, 0xba, 0x19, 0x1e, 0x18, 0x5a, 0xd5, 0x43, 0x3c, 0xc0, 0x0f, 0x60, 0x37, 0xf5, 0xc3, 0x45,
	0x46, 0xab, 0x7a, 0x59, 0xe0, 0xf4, 0x32, 0x91, 0xc7, 0x3e, 0xeb, 0xa1, 0xf0, 0x4b, 0x28, 0x47,
	0x99, 0xde, 0x28, 0xf7, 0xda, 0x8f, 0x36, 0xdb, 0x5e, 0x2b, 0xe1, 0xe5, 0xb9, 0xad, 0x0e, 0xa0,
	0x0b, 0x89, 0x2b, 0x50, 0x1c, 0x0f, 0x27, 0x97, 0xf6, 0x0e, 0xae, 0xc2, 0xee, 0x68, 0x70, 0x3e,
	0xb9, 0xb4, 0x2d, 0x7c, 0x0f, 0x2a, 0xa3, 0xc9, 0xf0, 0xdd, 0x60, 0x3c, 0x7c, 0x6f, 0x17, 0x30,
	0x40, 0xa9, 0x37, 0xb8, 0x1a, 0xf4, 0xfa, 0x76, 0xb1, 0xfd, 0x03, 0x01, 0xac, 0xee, 0x08, 0x9f,
	0x40, 0x35, 0x8f, 0x18, 0xae, 0x6f, 0x96, 0xcd, 0x3d, 0x6f, 0x3c, 0xdc, 0x3c, 0xc9, 0xdc, 0x73,
	0x76, 0xf0, 0x31, 0x94, 0xaf, 0x78, 0xcc, 0x35, 0xeb, 0xe0, 0x9f, 0xae, 0xb5, 0x43, 0x5b, 0xb4,
	0x1f, 0xa1, 0xa8, 0x07, 0xc3, 0xff, 0x1d, 0x77, 0x69, 0x4e, 0x63, 0x9b, 0x17, 0xce, 0xe1, 0xb7,
	0x9f, 0xbf, 0xbe, 0xa3, 0xfb, 0x4e, 0x85, 0xa4, 0x2f, 0x08, 0xa3, 0x33, 0x71, 0x9c, 0xbb, 0x83,
	0x3f, 0x41, 0xe1, 0x0d, 0x4b, 0xf0, 0x36, 0xf9, 0x76, 0xf6, 0x73, 0xc3, 0x7e, 0x8a, 0x9f, 0x68,
	0xf6, 0x0d, 0x0f, 0xba, 0x66, 0xbf, 0x5b, 0xb7, 0xe4, 0xc6, 0x5c, 0x62, 0xb7, 0x75, 0x4b, 0xa6,
	0x2c, 0x39, 0x95, 0x70, 0x48, 0x45, 0x94, 0x83, 0xcc, 0xf6, 0xde, 0xf1, 0x4e, 0xf7, 0x57, 0x56,
	0x8f, 0xf5, 0x22, 0x8f, 0xad, 0x0f, 0xdd, 0x29, 0x4f, 0x66, 0x8b, 0x6b, 0x97, 0x8a, 0x88, 0x18,
	0x11, 0xc9, 0x57, 0x7e, 0xe3, 0x25, 0xd1, 0x3b, 0xe9, 0xab, 0xd5, 0xe7, 0x6f, 0xcb, 0xba, 0x2e,
	0x99, 0x37, 0xd1, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xbf, 0xe9, 0xd1, 0x7c, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorClient interface {
	Calculate(ctx context.Context, in *Question, opts ...grpc.CallOption) (*Answer, error)
	Visitor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Answer, error)
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoMessage, error)
	Get(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error)
}

type calculatorClient struct {
	cc *grpc.ClientConn
}

func NewCalculatorClient(cc *grpc.ClientConn) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) Calculate(ctx context.Context, in *Question, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/rcrai.rpc.demo.Calculator/Calculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) Visitor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/rcrai.rpc.demo.Calculator/Visitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoMessage, error) {
	out := new(EchoMessage)
	err := c.cc.Invoke(ctx, "/rcrai.rpc.demo.Calculator/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) Get(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error) {
	out := new(EchoMessage)
	err := c.cc.Invoke(ctx, "/rcrai.rpc.demo.Calculator/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServer is the server API for Calculator service.
type CalculatorServer interface {
	Calculate(context.Context, *Question) (*Answer, error)
	Visitor(context.Context, *Empty) (*Answer, error)
	Echo(context.Context, *EchoRequest) (*EchoMessage, error)
	Get(context.Context, *EchoMessage) (*EchoMessage, error)
}

func RegisterCalculatorServer(s *grpc.Server, srv CalculatorServer) {
	s.RegisterService(&_Calculator_serviceDesc, srv)
}

func _Calculator_Calculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Question)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Calculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcrai.rpc.demo.Calculator/Calculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Calculate(ctx, req.(*Question))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_Visitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Visitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcrai.rpc.demo.Calculator/Visitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Visitor(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcrai.rpc.demo.Calculator/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcrai.rpc.demo.Calculator/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Get(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calculator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rcrai.rpc.demo.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Calculate",
			Handler:    _Calculator_Calculate_Handler,
		},
		{
			MethodName: "Visitor",
			Handler:    _Calculator_Visitor_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _Calculator_Echo_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Calculator_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rcapis/rpc/demo/Calculator.proto",
}
